<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ACDSKClient.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ACDSKClient</TokenIdentifier>
			<Abstract type="html">Client for interacting with Amazon Cloud Drive. All calls are asynchronous, non-blocking, and executed on a background thread. They take a failure block that provides an error with the reason for the failure, as well as a success block that provides a response object. Long running calls such as uploading and downloading also take a progress block that provides a progress value. When updating UI in a client callback block, be sure to do so on the main thread. Each call immediately returns a task object that represents the asynchronous request and can be cancelled. When logout occurs, you should deallocate any existing client instance. You should also cancel any client tasks in progress (or at least ignore the response).</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
            
			
			<NodeRef refid="16"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/initWithTokenProvider:</TokenIdentifier>
			<Abstract type="html">Client initializer that takes a token provider block. The easiest way to provide an auth token is with LoginWithAmazon using the open source AMZNAuthorizationProvider. See the SDK guide for more information.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithTokenProvider:(NSString *( ^ ) ( void ))tokenProvider</Declaration>
			<Parameters>
				<Parameter>
					<Name>tokenProvider</Name>
					<Abstract type="html">Block that returns a valid access token.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An initialized client.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithTokenProvider:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ACDSKClient/clientWithTokenProvider:</TokenIdentifier>
			<Abstract type="html">Convenience method for instantiating and initializing a new client object with a token provider block. The easiest way to provide an auth token is with LoginWithAmazon using the open source AMZNAuthorizationProvider. See the SDK guide for more information.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
			<Declaration>+ (instancetype)clientWithTokenProvider:(NSString *( ^ ) ( void ))tokenProvider</Declaration>
			<Parameters>
				<Parameter>
					<Name>tokenProvider</Name>
					<Abstract type="html">Block that returns a valid access token.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new initialized client.</Abstract></ReturnValue>
			<Anchor>//api/name/clientWithTokenProvider:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/getAccountEndpoint:fail:success:</TokenIdentifier>
			<Abstract type="html">Get endpoints to use for current customer for all other API calls. This request is made on your behalf as necessary. There is generally no need to explicitly make such a request.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAccountEndpointRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAccountEndpointResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)getAccountEndpoint:(ACDSKAccountEndpointRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKAccountEndpointResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/getAccountEndpoint:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/getAccountQuota:fail:success:</TokenIdentifier>
			<Abstract type="html">Get account quota information, including quota (total space), space available, and the time that the information was last calculated. Available space should not be used as an indicator of whether upload is possible - instead, check for a 403 status code when requesting to upload a file.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAccountQuotaResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAccountQuotaRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)getAccountQuota:(ACDSKAccountQuotaRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKAccountQuotaResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/getAccountQuota:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/getAccountInfo:fail:success:</TokenIdentifier>
			<Abstract type="html">Get account info, including version of accepted terms of use and also account status.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAccountInfoResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAccountInfoRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)getAccountInfo:(ACDSKAccountInfoRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKAccountInfoResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/getAccountInfo:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/getAccountUsage:fail:success:</TokenIdentifier>
			<Abstract type="html">Get account usage information, including a summary for each type of data stored in Cloud Drive.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAccountUsageResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAccountUsageRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)getAccountUsage:(ACDSKAccountUsageRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKAccountUsageResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/getAccountUsage:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/listNodes:fail:success:</TokenIdentifier>
			<Abstract type="html">List nodes.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKListNodesResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKListNodesRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)listNodes:(ACDSKListNodesRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKListNodesResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/listNodes:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/getNode:fail:success:</TokenIdentifier>
			<Abstract type="html">Get a node.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKGetNodeResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKGetNodeRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)getNode:(ACDSKGetNodeRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKGetNodeResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/getNode:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/updateNode:fail:success:</TokenIdentifier>
			<Abstract type="html">Update a node.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKUpdateNodeResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKUpdateNodeRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)updateNode:(ACDSKUpdateNodeRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKUpdateNodeResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/updateNode:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/createNode:fail:success:</TokenIdentifier>
			<Abstract type="html">Create a node. Can be used to create a folder.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKCreateNodeResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKCreateNodeRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)createNode:(ACDSKCreateNodeRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKCreateNodeResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/createNode:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/addNodeProperty:fail:success:</TokenIdentifier>
			<Abstract type="html">Add a single property (key-value pair) to a node. If the key already exists, then its value will be overwritten.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAddPropertyResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAddPropertyRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)addNodeProperty:(ACDSKAddPropertyRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKAddPropertyResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/addNodeProperty:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/getNodeProperty:fail:success:</TokenIdentifier>
			<Abstract type="html">Get a property of a node. App must have read access for the property.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKGetPropertyResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKGetPropertyRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)getNodeProperty:(ACDSKGetPropertyRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKGetPropertyResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/getNodeProperty:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/listNodeProperties:fail:success:</TokenIdentifier>
			<Abstract type="html">List the properties associated with a node. Properties are key-value pairs. They can be used to store arbitrary metadata about the node. App can only list properties for which it has read access.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKListPropertiesResponse</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKListPropertiesRequest</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)listNodeProperties:(ACDSKListPropertiesRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKListPropertiesResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/listNodeProperties:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/deleteNodeProperty:fail:success:</TokenIdentifier>
			<Abstract type="html">Delete a single property (key-value pair) from a node. App must have write access for the property. A successful request results in an empty response.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKDeletePropertyRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKEmptyResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)deleteNodeProperty:(ACDSKDeletePropertyRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKEmptyResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteNodeProperty:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/listNodesInTrash:fail:success:</TokenIdentifier>
			<Abstract type="html">List nodes in the trash.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKListNodesInTrashRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKListNodesInTrashResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)listNodesInTrash:(ACDSKListNodesInTrashRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKListNodesInTrashResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/listNodesInTrash:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/restoreNodeFromTrash:fail:success:</TokenIdentifier>
			<Abstract type="html">Restore a node from the trash.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKRestoreNodeFromTrashRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKRestoreNodeFromTrashResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)restoreNodeFromTrash:(ACDSKRestoreNodeFromTrashRequest *)request fail:(void ( ^ ) ( NSError *))errorHandler success:(void ( ^ ) ( ACDSKRestoreNodeFromTrashResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/restoreNodeFromTrash:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/moveNodeToTrash:fail:success:</TokenIdentifier>
			<Abstract type="html">Move a node to the trash.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKMoveNodeToTrashRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKMoveNodeToTrashResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)moveNodeToTrash:(ACDSKMoveNodeToTrashRequest *)request fail:(void ( ^ ) ( NSError *))errorHandler success:(void ( ^ ) ( ACDSKMoveNodeToTrashResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/moveNodeToTrash:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/getChanges:fail:success:</TokenIdentifier>
			<Abstract type="html">Get changes in a Cloud Drive account. Getting changes periodically will give the delta of the previously known state and the new state, providing an indication of how to update your local state to match the cloud state. Response includes changes since the given checkpoint, or all changes if no checkpoint is specified.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKGetChangesRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKGetChangesResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)getChanges:(ACDSKGetChangesRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKGetChangesResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/getChanges:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/listChildren:fail:success:</TokenIdentifier>
			<Abstract type="html">List children of a node.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKListChildrenRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKListChildrenResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)listChildren:(ACDSKListChildrenRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKListChildrenResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/listChildren:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/addChildToParent:fail:success:</TokenIdentifier>
			<Abstract type="html">Add a node as a child of a parent node. Can be used to add a file (or folder) to a folder. A successful request results in an empty response.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKAddChildToParentRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKEmptyResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)addChildToParent:(ACDSKAddChildToParentRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKEmptyResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/addChildToParent:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/removeChildFromParent:fail:success:</TokenIdentifier>
			<Abstract type="html">Remove a child node from a parent. A successful request results in an empty response.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKEmptyResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)removeChildFromParent:(ACDSKRemoveChildFromParentRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler success:(void ( ^ ) ( ACDSKEmptyResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/removeChildFromParent:fail:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/downloadFile:fail:progress:success:</TokenIdentifier>
			<Abstract type="html">Download the contents of a file node.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKDownloadFileRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKDownloadFileResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)downloadFile:(ACDSKDownloadFileRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler progress:(void ( ^ ) ( float progressed ))progressHandler success:(void ( ^ ) ( ACDSKDownloadFileResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>progressHandler</Name>
					<Abstract type="html">Request progress block that handles given progress between 0 and 1. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/downloadFile:fail:progress:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ACDSKClient/uploadFile:fail:progress:success:</TokenIdentifier>
			<Abstract type="html">Upload the contents of a new file node.</Abstract>
			<DeclaredIn>ACDSKClient.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKUploadFileRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/ACDSKUploadFileResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (ACDSKTask *)uploadFile:(ACDSKUploadFileRequest *)request fail:(void ( ^ ) ( NSError *error ))errorHandler progress:(void ( ^ ) ( float progressed ))progressHandler success:(void ( ^ ) ( ACDSKUploadFileResponse *response ))successHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The configured request object.</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">Request failure block that handles a given error. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>progressHandler</Name>
					<Abstract type="html">Request progress block that handles given progress between 0 and 1. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">Request success block that handles a given response. When updating UI, be sure to do so on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Task object that represents the asynchronous request and can be cancelled.</Abstract></ReturnValue>
			<Anchor>//api/name/uploadFile:fail:progress:success:</Anchor>
            <NodeRef refid="16"/>
		</Token>
		
        
        
	</File>
</Tokens>